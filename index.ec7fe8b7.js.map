{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-8f6dd866cb1e1e5d.js","node_modules/@parcel/runtime-js/lib/runtime-81eea64af4a46e64.js","src/js/dino.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"f9XUG\\\":\\\"index.ec7fe8b7.js\\\",\\\"kfaKj\\\":\\\"cactus.bb421734.png\\\"}\"));","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"kfaKj\")).toString();","const dino = () => {\n  let speed = 3;\n  let score;\n  let animationFrameId = null;\n\n  const stageDOM = document.querySelector('.dino__stage');\n  const sprites = {\n    dino: {\n      isJumping: false,\n      isTouchingCactus: false,\n      dom: document.querySelector('.dino__dino'),\n    },\n    ground: {\n      width: 481,\n      offsets: [],\n      dom: Array.from(document.querySelectorAll('.dino__ground *')),\n    },\n    cactuses: {\n      dom: document.querySelector('.dino__cactuses'),\n      width: 33,\n      clones: [],\n    },\n  };\n\n  sprites.ground.dom.forEach((domElement, index) => {\n    domElement.style.left = index === 0 ? sprites.ground.width + 'px' : '0px';\n    sprites.ground.offsets.push(parseFloat(domElement.style.left));\n  });\n\n  const handleJump = e => {\n    const isJumpKey = e.code === 'Space' || e.code === 'ArrowUp';\n    const { dino } = sprites;\n\n    if (\n      ((e.type === 'keydown' && isJumpKey) || e.type === 'mousedown') &&\n      !dino.isJumping\n    ) {\n      const {\n        dom: { style },\n      } = dino;\n\n      e.preventDefault();\n\n      dino.isJumping = true;\n      style.bottom = '80%';\n\n      setTimeout(() => {\n        style.bottom = '';\n\n        stageDOM.addEventListener(\n          'transitionend',\n          () => (dino.isJumping = false)\n        );\n      }, 400); // Duration of the jump\n    }\n  };\n\n  stageDOM.addEventListener('focus', () => {\n    stageDOM.addEventListener('keydown', handleJump);\n    stageDOM.addEventListener('mousedown', handleJump);\n    stageDOM.classList.add('dino__stage-focus');\n  });\n\n  stageDOM.addEventListener('blur', () => {\n    stageDOM.removeEventListener('keydown', handleJump);\n    stageDOM.removeEventListener('mousedown', handleJump);\n    stageDOM.classList.remove('dino__stage-focus');\n  });\n\n  const checkCollision = () => {\n    const { dino, cactuses } = sprites;\n\n    const dinoRect = dino.dom.getBoundingClientRect();\n\n    for (const cactus of cactuses.clones) {\n      const cactusRect = cactus.dom.getBoundingClientRect();\n\n      if (\n        !(\n          dinoRect.bottom < cactusRect.top ||\n          dinoRect.top > cactusRect.bottom ||\n          dinoRect.right < cactusRect.left ||\n          dinoRect.left > cactusRect.right\n        )\n      ) {\n        sprites.dino.isTouchingCactus = true;\n        return true; // Колізія знайдена\n      }\n    }\n\n    sprites.dino.isTouchingCactus = false;\n    return false; // Колізія не знайдена\n  };\n\n  const animateWorld = function () {\n    const { ground, cactuses } = sprites;\n\n    const startMove = () => {\n      ground.offsets = ground.offsets.map(offset => offset - speed);\n\n      ground.dom.forEach((domElement, index) => {\n        const offset = ground.offsets[index];\n        domElement.style.left = `${offset}px`;\n\n        if (offset <= -ground.width) {\n          ground.offsets[index] = ground.width * (ground.dom.length - 1);\n        }\n      });\n\n      cactuses.clones.forEach((clone, index) => {\n        clone.offset -= speed;\n        clone.dom.style.left = `${clone.offset}px`;\n\n        if (clone.offset <= -cactuses.width) {\n          cactuses.dom.removeChild(clone.dom);\n          cactuses.clones.splice(index, 1);\n        }\n      });\n\n      if (\n        cactuses.clones.length === 0 ||\n        cactuses.clones[cactuses.clones.length - 1].offset <\n          ground.width - (Math.floor(Math.random() * 300) + 150)\n      ) {\n        let newCactus = document.createElement('img');\n        newCactus.src = new URL('../images/cactus.png', import.meta.url);\n        newCactus.classList.add('dino__sprite', 'dino__onground');\n        newCactus.style.width = Math.floor(Math.random() * 15) + 10 + 'px';\n        newCactus.alt = 'cactus';\n\n        cactuses.clones.push({\n          id: cactuses.clones.length,\n          offset: ground.width + Math.random() * (ground.width / 8),\n          dom: newCactus,\n        });\n\n        cactuses.dom.appendChild(newCactus);\n      }\n\n      score++;\n      stageDOM.querySelector('.dino__score span').textContent = score;\n\n      animationFrameId = requestAnimationFrame(startMove);\n\n      if (checkCollision()) {\n        stageDOM.querySelector('.dino__end').style.display = '';\n        stopAnimation();\n      }\n    };\n\n    startMove();\n  };\n\n  const stopAnimation = () => {\n    if (animationFrameId) {\n      cancelAnimationFrame(animationFrameId);\n      animationFrameId = null;\n\n      stageDOM.removeEventListener('keydown', handleJump);\n      stageDOM.removeEventListener('mousedown', handleJump);\n    }\n  };\n\n  const startGame = () => {\n    stopAnimation();\n\n    stageDOM.querySelector('.dino__play').style.display = 'none';\n    stageDOM.querySelector('.dino__end').style.display = 'none';\n\n    sprites.dino.isJumping = false;\n    sprites.dino.isTouchingCactus = false;\n\n    document.querySelector('.dino__cactuses').textContent = '';\n    sprites.cactuses.clones = [];\n\n    score = 0;\n\n    sprites.ground.dom.forEach((domElement, index) => {\n      domElement.style.left = index === 0 ? sprites.ground.width + 'px' : '0px';\n      sprites.ground.offsets[index] = parseFloat(domElement.style.left);\n    });\n\n    stageDOM.setAttribute('tabindex', '0');\n    stageDOM.focus();\n\n    animateWorld();\n  };\n\n  window.addEventListener('beforeunload', stopAnimation);\n\n  stageDOM\n    .querySelector('.dino__play .btn')\n    .addEventListener('click', startGame);\n  stageDOM\n    .querySelector('.dino__end .btn')\n    .addEventListener('click', startGame);\n\n  // Сховуємо екран завершення гри при завантаженні\n  stageDOM.querySelector('.dino__end').style.display = 'none';\n};\n\ndino();\n"],"names":["$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$48c06ec5535fb9ac$exports","URL","resolve","import","meta","url","toString","score","animationFrameId","stageDOM","document","querySelector","sprites","dino","isJumping","isTouchingCactus","dom","ground","width","offsets","Array","from","querySelectorAll","cactuses","clones","forEach","domElement","index","style","left","push","parseFloat","handleJump","e","isJumpKey","code","dino1","type","preventDefault","bottom","setTimeout","addEventListener","classList","add","removeEventListener","remove","animateWorld","startMove","map","offset","clone","removeChild","splice","Math","floor","random","newCactus","createElement","src","alt","appendChild","textContent","requestAnimationFrame","dino2","dinoRect","getBoundingClientRect","cactus","cactusRect","top","right","checkCollision","display","stopAnimation","cancelAnimationFrame","startGame","setAttribute","focus","window","$1523f3b7cb4c19b2$var$dino"],"version":3,"file":"index.ec7fe8b7.js.map"}